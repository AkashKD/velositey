#target photoshopapp.bringToFront();$.level = 0;// GlobalsSettings = {	storedPaths: {},	storedSelections: {},	scriptName: "ClearGuides",	units: "pixels"	};// Main entry pointmain();function main() {	// Clear guides	docClearGuides();		}// Functionsfunction cTID(s) {return app.charIDToTypeID(s);}function docClearGuides() {	return docWrapEdits(arguments, "Remove Guides", clearGuides);	function clearGuides() {		var ar, ad;		ar = new ActionReference();		ar.putEnumerated(cTID("Gd  "), cTID("Ordn"), cTID("Al  "));		ad = new ActionDescriptor();		ad.putReference(cTID("null"), ar);		executeAction(cTID("Dlt "), ad, DialogModes.NO);		return true;		};	}function docWrapEdits(src, name, fn) {	var result;		if (!documents.length) { logErr(src, "noOpenDocs"); return; }	try {		activeDocument.suspendHistory(name, "edit();");		return result;		}	catch(e) { log(src.callee, e); }		function edit() { result = fn(); };	}function fileAppend(path, data, encoding) {	var file;	file = new File(path);	file.open("a");	if (typeof(encoding) == "string") {file.encoding = encoding;}	file.write(data);	file.close();	}function fileWrite(path, data, encoding) {	var file;	file = new File(path);	if (file.exists) {file.remove();}	file.open("e");	if (typeof(encoding) == "string") {file.encoding = encoding;}	file.write(data);	file.close();	}function log(v, err, msg) {	// Initialization	if (!Settings.debug) {		var pathArray, date, str;		Settings.debug = {			delim:String.fromCharCode(13, 10),			path: Folder.userData+ "/Script Builder Files/" +Settings.scriptName+ " - Log.txt",			text:""			};		date = new Date();		str = "Begin debug log: " + date.toLocaleString() +Settings.debug.delim;		str += "------------------------------------------------------------" +Settings.debug.delim;		fileWrite(Settings.debug.path, str);		}		// Error logging	if (typeof v == "function") {		v = "Error in " +v.name+ "(): ";		if (err && msg) { v += msg + " " + err.message; }		else if (err) { v += err.message; }		else if (msg) { v += msg; }		else { v = v.substring(0, v.length-2) + "."; }		}		// Normal message logging	else {		if (typeof v != "string") {			if (v == undefined) {v = "undefined";}			else {v = v.toString();}			}		}		if (Settings.debug.path) { fileAppend(Settings.debug.path, v + Settings.debug.delim); }	}function logErr(src, id) {	var err = {		badChannelValue:	"Invalid channel number entered.",		badColorValue:		"Invalid color value entered.",		badDocDimsValue:	"Invalid document dimensions entered.",		badExportValues:	"Invalid file path or file name value supplied for export.",		badNameValue:			"Invalid name value supplied.",		badNumberValue:		"Invalid number value supplied.",		badPathName:			"Path name supplied is not unique.",		badRefEdgeOuput:	"Output method cannot be used when decontaminating colors.",		badSubdivValue:		"Subdivisions value must be an integer between 1 and 100.",		badTestValue:			"Invalid comparison value supplied.",		fileError:				"Could not read file.",		fileExists:				"A file of the same name already exists in the chosen location.",		flatImagesOnly:		"This function only works on flattened images.",		layerDataError:		"An error occurred while reading the layer settings.",		logNotEnabled:		"Log must be enabled in order to assign file path.",		multiLayerOnly:		"More than one layer must be selected.",		noClipImageData:	"No image data on clipboard.",		noDocFile:				"Document has never been saved.",		noActionName:			"No action name specified.",		noActionSetName:	"No action set name specified.",		noBkgdLayer:			"There is no background layer.",		noDestFolder:			"Destination folder not defined.",		noFile:						"File does not exist at the specified location.",		noFileSystemPath:	"No file or folder path was chosen.",		noFilterImg:			"Image file does not exist, or none was selected.",		noFilterMask:			"Layer has no filter mask.",		noFolder:					"Folder does not exist at the specified location.",		noFormatOptions:	"The \"formatOptions\" parameter is not defined.",		noHTMLExporter:		"The \"htmlExporter\" object does not exist or is not valid.",		noLayerArtwork:		"Layer has no image data.",		noLayerComps:			"Document has no layer comps.",		noLayerFX:				"Layer has no effects.",		noLayerMask:			"Layer has no layer mask.",		noLogTextFile:		"Log file path should point to a text file.",		noLogFile:				"Log file path does not point to a file.",		noNameValue:			"No new name entered.",		noOpenDocs:				"There are no documents open.",		noQuicktime:			"File format requires QuickTime.",		noSelectedPath:		"There is no path selected.",		noSelection:			"There is no selection.",		noSelectionMod:		"There is no selection to modify.",		noTextExporter:		"The \"textExporter\" object does not exist or is not valid.",		noVectorMask:			"Layer has no vector mask.",		noWorkPath:				"Document has no work path.",		singleLayerOnly:	"Only one layer should be selected.",		wrongLayerKind:		"Selected layer is the wrong kind for the requested action."		}[id];	if (err) { log(src.callee, null, err); }	}